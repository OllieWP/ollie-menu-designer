name: Create Release from Readme

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Check if version changed
        id: version_check
        run: |
          # Get current version from readme.txt
          CURRENT_VERSION=$(grep -Po 'Stable tag: \K(.*)' readme.txt)
          echo "Current version: $CURRENT_VERSION"

          # Get previous version from readme.txt in the previous commit
          git checkout HEAD~1 readme.txt
          PREVIOUS_VERSION=$(grep -Po 'Stable tag: \K(.*)' readme.txt || echo "0.0.0")
          git checkout HEAD readme.txt
          echo "Previous version: $PREVIOUS_VERSION"

          # Compare versions
          if [ "$CURRENT_VERSION" = "$PREVIOUS_VERSION" ]; then
            echo "Version has not changed. Skipping release."
            echo "VERSION_CHANGED=false" >> $GITHUB_ENV
          else
            echo "Version changed from $PREVIOUS_VERSION to $CURRENT_VERSION"
            echo "VERSION_CHANGED=true" >> $GITHUB_ENV
          fi

      - name: Set up Node.js
        if: env.VERSION_CHANGED == 'true'
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        if: env.VERSION_CHANGED == 'true'
        run: npm install

      - name: Build plugin
        if: env.VERSION_CHANGED == 'true'
        run: npm run build

      - name: Extract version and changelog
        if: env.VERSION_CHANGED == 'true'
        id: extract_info
        run: |
          # Extract stable tag
          STABLE_TAG=$(grep -Po 'Stable tag: \K(.*)' readme.txt)
          echo "STABLE_TAG=$STABLE_TAG" >> $GITHUB_ENV

          # Extract latest changelog entry
          CHANGELOG_TITLE=$(grep -Po '= [0-9.]+ .*=' readme.txt | head -1)

          # Get all bullet points under the latest changelog entry
          CHANGELOG_START_LINE=$(grep -n "$CHANGELOG_TITLE" readme.txt | cut -d ':' -f 1)
          NEXT_SECTION_LINE=$(tail -n +$((CHANGELOG_START_LINE+1)) readme.txt | grep -n "=" | head -1 | cut -d ':' -f 1)

          if [ -z "$NEXT_SECTION_LINE" ]; then
            # If there's no next section, read until end of changelog section
            NEXT_SECTION_LINE=$(tail -n +$((CHANGELOG_START_LINE+1)) readme.txt | grep -n "==" | head -1 | cut -d ':' -f 1)
          fi

          if [ -z "$NEXT_SECTION_LINE" ]; then
            # If still no section found, read next 20 lines
            NEXT_SECTION_LINE=20
          fi

          CHANGELOG_CONTENT=$(tail -n +$((CHANGELOG_START_LINE+1)) readme.txt | head -n $((NEXT_SECTION_LINE-1)))

          # Format the release notes
          RELEASE_NOTES="${CHANGELOG_TITLE}\n${CHANGELOG_CONTENT}"
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo -e "$RELEASE_NOTES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create ZIP archive
        if: env.VERSION_CHANGED == 'true'
        run: |
          # Create the zip file directly, excluding development files
          zip -r menu-designer.zip . \
              -x "*.git*" \
              -x "*.github*" \
              -x "node_modules/*" \
              -x "src/*" \
              -x "Sites/*" \
              -x "*.log" \
              -x ".DS_Store" \
              -x "package-lock.json" \
              -x "*.sh" \
              -x "CLAUDE.md" \
              -x ".editorconfig" \
              -x ".claude/*"

      - name: Create Release
        if: env.VERSION_CHANGED == 'true'
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.STABLE_TAG }}
          name: Menu Designer v${{ env.STABLE_TAG }}
          body: ${{ env.RELEASE_NOTES }}
          draft: false
          prerelease: false
          files: menu-designer.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
